In order to fortify understanding, one may have to supplement description below with the comments within the code.

Creational Patterns are those which deal with the Creation of Objects for controlling the instances of Objects created.

Singleton
SingleTon is one of the most commonly used of design patterns. SingleTon usually has 2 intents:
There exists only instance of a class. To be able to use a Singleton effectively it becomes important to define the scope of Singleton here. In the example we have written the scope is one instance per Classloader. If two such classes are in two WARs in an EAR deployed into JBoss 5 for example, the App Server ClassLoader would create two seperate instances of the Singleton, one per each ClassLoader which loads the WARs. However if it was in the EAR there would only be one such instance as far as both the WARs are concerned, due to the sheer deligation model followed by JBoss 5 class loaders.
Containers such as Spring Application Context that manages beans lets us define by scope via the ‘scope’ attribute, one among them is the ‘singleton’ scope which in this context means one instance per ApplicationContext instance. Hence Singleton is a highly relative term. A Singleton class within an EJB Container is said to be JVM Scoped even within a cluster by default. But when an configured as Migratable target or a Pinnable Service, a Singleton EJB becomes is one instance in the whole cluster this service spans at any point of time but is not a true Singleton since it may maintain a second instance during the application life cycle.
Provide a global point of access to the object. This is important because we do not expose the constructor to the caller since we don’t want him(as in the client) to control the instances of this class. Hence we provide the instances by virtue of a static method that returns him the instance we control within the Singleton.
Singleton can have a lot of variants based on the necessities of the day. Few of the variants written in the attached code are the Early Loading Singleton, Singleton written to work on single threaded environment, Thread Safe Singletons with/without synchronization etc..
source: https://github.com/technicalyorker/source/tree/master/Patterns/src/org/technicalyorker/dp/creational/singleton

Prototype
Prototype is yet another creational pattern used to create objects. Unlike Singleton we use Prototype to return a new instance every single time, but without having to go for the process of having to create it ourselves. This comes particularly handy when we have no idea what we are Cloning.
Prototype is preferred when:
Prototyped instances should be Instantiatable at the runtime
Creation of a new instance is usually costly or not possible and hence required to create a cloned copy rather than a new one.
A hierarchy like in Factory is to be avoided.
There are two ways of cloning as we all know. Shallow and Deep Cloning.
The examples demonstrate how shallow Cloning differs from its Deep counterpart. While the FairyWarGame can clone Wizards into the Battalion, all with the same ‘Soul’, DeepCloningPrototypingUtility can deep clone the Serializable objects. These are just 2 different ways of prototyping an object.
source: https://github.com/technicalyorker/source/tree/master/Patterns/src/org/technicalyorker/dp/creational/prototype

Builder:
Builder pattern is used to construct complex objects that sometimes have to go through several steps. As with Factory for instance, there is a Product that is created which is primarily exposed through the common interface. Builder has applications in almost all frameworks. Apache Camel for example has the Route builder, which uses the Method Chaining to encapsulate endpoint and filter definitions.
The example in the blog uses builder in the form of a configuration builder which uses method chaining (concept quite familiarly adopted  by Hibernate to create its Configuration Object).The application is a Spring like Container that loads the objects by its default Constructor. Bean Properties have been avoided for simplicity and my laziness ;). The ContainerContext loads the container based on the properties provided. Configuration can be built from multiple sources such as properties files,XML files, DB etc and the combination of the same.
The ContainerContextFactory delegates the control to the builder to build the ConfigurationBuilder. In the example I have used 2 properties file to load the beans.
source: https://github.com/technicalyorker/source/tree/master/Patterns/src/org/technicalyorker/dp/creational/builder

Factory
Factory pattern primarily produces a Product exposed via a common interface. The factory in the example is that of a Racquet Factory which is operated by a FactoryOperator. The produceRacquet() in the RacquetFactory is the factory method. The factory Method encapsulates the instantiation logic behind it. Thus an operator can make the factory work via the interface without having to know the details of how to create each product. For him its a black box which produces a Racquet when a red button next to the label is pressed ;).
A lot of us believe Calendar is an example of Singleton which is not the case. A simple way to test it calls the equals of two Calendar instances. Calendar is a typical Factory which creates its instance based on one’s Locale by default.
source: https://github.com/technicalyorker/source/tree/master/Patterns/src/org/technicalyorker/dp/creational/factory

Abstract Factory
Abstract Factory is used where one has to create a family of related objects without having to specify its implementations. In the example it is again a RacquetFactory, but this time the materials are dynamically decided based on the customer demand such as quality and price. For example the best quality Tennis Racquet are produced by the Racquet Factory which in turn uses the best quality materials available in the Material Factory. In the example the hierarchy is rather complex, compared to the factory pattern. It is more like a factory of many factories that produces complex objects.
source: https://github.com/technicalyorker/source/tree/master/Patterns/src/org/technicalyorker/dp/creational/abstractfactory