Micokernal is the architectural pattern one would adopt in situations where one would have to design a product that is going to be customised to different client requirements. In one such an insurance product that had a core engine totally isolated from the rest of the application. The some of the left over modules is customised to meet the insurance rules of the country and rest,to deal with the configuration and extension that enable the product to cater to the demands of the customer insurance companies. The core almost never changed while the rest of the product could accommodate the challenging demands of its stakeholders.
Thus the microkernal architecture have 2 parts the core and the plugin component modules. The pattern itself lends its name from few OS which have the concept of a Kernel that stay independent of the various customisations. The plug-in component modules are independent of other plug-in modules, even so if there is an interdependency it should be kept to a minimum in ordered to avoid dependency issues that may arise out of tight coupling. These plugins are registered via a registry entry. The registry entry could be anything from an XML configuration file, an annotation or even a Soap Based Web Service Registry. The core module can interract with these modules using any communication protocols for instance RMI-IIOP or WebServices or XML using JMS etc. Few of the Microkernal architectures that can be commonly found is the eclipse IDE, Debian and other flavours of Linux Operating System, Firefox plugins etc. Some insurance products seem to use rule engines to handle much of its complexities, it is often the case that complex business rules turn the architecture into a 'Big Ball of Mud' anti pattern. 
The best part of the pattern is that a software designed using this architecture can always be refactored into another pattern that is better suited for its specific requirements. 
The strengths of the pattern is that is its high adaptability to a change. Ease of deployment is yet another feature. Based on how it is designed the application can undergo hot deployment or minimal downtime.High testability due to its modular and decoupled nature. The over performance of the pattern would not be all the good due to overhead of extra layering. However only using the modules that are really required enables high performance eg the JBoss server is loaded with the help of the microcontainer. It is possible to configure a module alone so that it can run with a minimal version providing services that are only required by the application to run.
Some of its weakness include low scalability and low ease of deployment.  