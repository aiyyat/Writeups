N-tier Architectural Pattern:
This is one of the most commonest of Architectural Pattern and very popular among JEE Architects. Although proven to work well, like any other Architectural pattern they too have their strengths and weaknesses. 
Though the Pattern itself doesn't define the composition of each layer, most often the tiers that make up the N-tier Architecture or the Layered architecture are:
>Presentation Tier
>Business Tier
>Persistence Tier
>Enterprise Information System Tier.   
Each tier is almost always only concerned about its scope of work. For example the presentation tier never worries about persisting domain entities or processing the user data. This pattern thus brings about a natural Seperation Of Concerns# within its layers. Every layer in the N-tier Architecture are either Open or Closed. A Closed layer is one which can talks to only its immediate neighbours - Law Of Demeter#. This is called Layers of Isolation. 
Consequence? It may sometimes so happen that we end up introducing what is known as a 'Architecture Sinkhole Anti-Pattern'. Controls just pass through layers that does absolutely nothing. 
In such situations one could 'Open' up these 'Closed' layers. For example a particular architecture may require to introduce a Service Layer in between the Business and Persistence Tiers. So in a closed Layering the Business Layer talks to the Service and the Service to the Persistence Layer. But, there may be a lot of situations where the business layer may just have to bypass Service Layer to have to directly access the Data Access layer in the Persistence Tier. To avoid an Architecture Sinkhole, we change the Service to an Open Layer. But then the dilemma always exists as to when to Open a Layer. 
The 80-20 Rule is here to rescue. If only less than around 20% of the requests are going to be pass through in nature, we still keep the layers closed. The important thing to note here is the decision making of whether a layer is to be Opened or kept Closed should happen well in advance. It is to be decided & documented as a part of the Primary Design Documentation. Opening while the project is still running will introduce unwanted interdependencies.
One of the primary Strengths of the Architecture pattern is the Ease of Development. Well Structured team can make this model a success. Team can invest in training their resource in their specific areas of focus (see Conway's law). 
High testability is another advantage of the pattern. Well structured layering will let a developer unit test his layer with ease.
Another advantage of clear cut definition of the layering is that the layers can be ported without affecting the rest of the application. A Presentation Tier written on Servlets and be ported to  JSF, Struts or other MVC's for instance without the other layers being aware of the change. A Persistence Tier written on JDBC can be easily ported to JPA or Hibernate if one adopts patterns such as Generic DAO Pattern which is a modified form of the Bridge Pattern. Thus the implementation can vary irrespective of the underlying Persistence Provider.   
Some of the disadvantages include low Responsiveness to a Change. A change may lead multiple layers to undergo change due to the monolithic nature and tight coupling of layers in the pattern. Deployment generally demands a whole application deployment	or the 'big bang' deployment.The architecture does not lend itself to high performance applications. 
Scalability also takes a hit if the implementation is monolithic and tightly coupled. 
Yet, if one cannot decide on where the requirements could lead the architecture in the years to come its generally safer to resort to this than any other pattern.  